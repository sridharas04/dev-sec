name: CI/CD DevSecOps Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  security-events: write

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          # Setup Node.js
          curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
          sudo apt-get install -y nodejs
          # Setup Python
          sudo apt-get install -y python3 python3-pip
          # Install global npm packages
          npm install -g snyk snyk-to-html
          # Install project dependencies
          npm cache clean --force
          npm install
          npm install bcrypt@latest
          npm install bcryptjs@latest
          pip install requests

      - name: Gitleaks Scan
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.16.1/gitleaks_8.16.1_linux_x64.tar.gz | tar -xz
          ./gitleaks detect --source . --report-format json --report-path gitleaks-report.json --redact --log-opts=-1
        continue-on-error: true

      - name: SCA Scan
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test --all-projects --json-file-output=results-opensource.json
        continue-on-error: true

      - name: SAST Scan
        run: |
          snyk code test --json-file-output=results-code.json
        continue-on-error: true

      - name: Optimize Docker Image
        run: |
          curl -sL https://github.com/slimtoolkit/slim/releases/download/1.40.11/dist_linux.tar.gz -o docker-slim.tar.gz
          tar -xzf docker-slim.tar.gz
          sudo mv dist_linux/slim /usr/local/bin/
          sudo mv dist_linux/slim-sensor /usr/local/bin/
          rm -rf dist_linux docker-slim.tar.gz
          docker build -t myapp .
          slim build --target myapp --http-probe=false
        continue-on-error: true

      - name: Container Scan
        run: |
          snyk container test --file=Dockerfile --json-file-output=results-container.json --exclude-app-vulns myapp.slim
        continue-on-error: true

      - name: IaC Scan
        run: |
          curl -L "$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E "https://.+?_Linux_x86_64.tar.gz")" > terrascan.tar.gz
          tar -xzf terrascan.tar.gz terrascan && rm terrascan.tar.gz
          sudo install terrascan /usr/local/bin && rm terrascan
          terrascan scan -t aws -i terraform -o json -d terraform > terrascan-report.json
        continue-on-error: true

      - name: DAST Scan
        run: |
          docker pull appsecco/dsvw
          docker run -p 9090:8000 -it -d appsecco/dsvw && sleep 5
        continue-on-error: true
        uses: PortSwigger/dastardly-github-action@v1.0.0
        with:
          target-url: 'http://localhost:9090/'
          output-filename: 'dastardly-report.xml'

      - name: Upload Reports
        uses: actions/upload-artifact@v3.1.2 
        with:
          name: All-Reports
          path: |
            gitleaks-report.json
            dastardly-report.xml
            results-opensource.json
            results-code.json
            terrascan-report.json
            results-container.json

      - name: Execute DefectDojo Script
        run: |
          python3 defect-dojo.py
        continue-on-error: true
        env:
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_PRODUCT_ID: ${{ secrets.DEFECTDOJO_PRODUCT_ID }}
